# pywps web processing service
upstream {{ item.name }} {
    # socket connection
    server unix://{{ wps_run_dir }}/{{ item.name }}.sock fail_timeout=0;
}

proxy_cache_path {{ wps_cache_dir }} levels=1:2 keys_zone=pywps:10m max_size=1g
                 inactive=10m use_temp_path=off;

map $arg_request $wps_nocache {
  default         1;
  GetCapabilities 0;
  DescribeProcess 0;
  Execute         1;
}

{% if wps_enable_acl %}
map $arg_request $wps_deny {
  default         1;
  GetCapabilities 0;
  DescribeProcess 0;
  Execute         1;
}
{% endif %}

server {
    {% if wps_enable_https %}
    listen                 {{ item.port | default('5000') }} ssl;
    {% else %}
    listen                 {{ item.port | default('5000') }};
    {% endif %}
    server_name            {{ item.hostname | default('localhost') }};
    {% if wps_enable_https %}
    ssl_certificate        {{ ssl_certs_cert_path }};
    ssl_certificate_key    {{ ssl_certs_privkey_path }};
    {% endif %}

    # better to redirect / to wps application
    location / {
      return 301 /wps;
    }

    # PyWPS avail at /wps
    location /wps {
        proxy_cache             pywps;
        proxy_cache_valid       200 10m;
        proxy_cache_bypass      $http_cache_control $arg_nocache;
        proxy_no_cache          $http_pragma $wps_nocache;
        add_header X-Proxy-Cache $upstream_cache_status;
        proxy_pass              http://{{ item.name }};
        proxy_set_header        X-Forwarded-Ssl on;
        proxy_set_header        X-Forwarded-Host $host/wps/;
        proxy_set_header        X-Forwarded-Server $host;
        proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
        # proxy_set_header        X-SSL-Client-Cert $ssl_client_escaped_cert;
        proxy_set_header        X-SSL-Client-Verify $ssl_client_verify;
        proxy_set_header        X-SSL-Client-S-DN $ssl_client_s_dn;
        proxy_redirect          off;
        proxy_buffering         on;
        client_max_body_size    8m;
        proxy_read_timeout      60s;
        {% if wps_enable_acl %}
        # access control
        limit_except GET {
            {% for ip_range in wps_acl_allow %}
            allow {{ ip_range }};
            {% endfor %}
            deny all;
        }
        if ($wps_deny) {
            return 403;
        }
        {% endif %}
    }

    {% if not fs_enabled %}
    # PyWPS Outputs
    location /outputs
    {
        alias {{ wps_basedir }}/outputs;
        autoindex off;
    }
    {% endif %}

    # endpoint for load-balancer health checks
    location /health
    {
        access_log off;
        rewrite ^ /wps?service=WPS&request=GetCapabilities last;
    }

}
